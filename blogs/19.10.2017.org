Кнут придумал литературное программирование в начале 1980-х годов, во время работы над TeX-ом. Надо
сказать, что первую версию TeX-а он написал и отладил на бумаге, а ввёл в компьютер лишь спустя
несколько месяцев.

Понятно, что для успеха такой разработки код должно быть легко читать. Вообще читаемость кода, по
мнению многих опытных разработчиков - это главное, что сейчас требуется от программистов.

Кнут предложил довести требование читаемости кода до предела и превратить написание программы в
написание книги об этой программе. При этом код и документация не разделяются, они описывают решение
проблемы формально и неформально. Естественно, что логика изложения может отличаться от
последовательности команд. Кроме того, текст должен быть представлен в удобном для читателя
виде. Поэтому нужны специальные инструменты, которые позволяют смешивать разметку текста и код.

Кнут, вполне естественно, предложил для текста TeX. Кроме того, в тот момент он использовал язык
программирования Pascal, строгость которого усугубляется требованием однопроходной компиляции. Из-за
этого порядок определения функций, типов и переменных строго фиксирован, что противоречит требованию
понятности изложения. Так что Дональду Кнуту пришлось написать свою систему WEB, которая устроена
примерно так. Программа состоит из кусочков (chunks)документации, чередующихся с кусочками кода. В
кусочках кода можно ссылаться на другие кусочки, причем ссылки могут идти и вперед, и назад, а на
один кусочек может быть несколько ссылок. Получается своего рода сеть, отсюда и название, которое
потом использовали для похожей структуры документов в интернет.

Чтобы такую программу можно было использовать, есть две утилиты - tangle, которая вытаскивает
кусочки кода, подставляет их на место ссылок и формирует программу, которую можно скомпилировать, и
weave , которая форматирует кусочки кода командами TeX и создает документ TeX, который можно
распечатать.

TeX и написан таким образом, а человеко-читаемая версия вышла в виде книги "TeX: The program".

Кстати, чтобы получить эту книгу в электронном виде, достаточно скачать исходный код TeX и выполнить
следующие команды:

weave tex.web
tex tex.tex
xdvi tex.dvi

или

pdftex tex.tex
xpdf tex.pdf

Потом Кнут перешёл на язык C (который он хвалил в своём интервью, см. предыдущий пост ) и написал
CWEB. Возникли и другие инструменты, например, noweb, nuweb, rambutan и другие.

Литературное программирование пока не достигло большой популярности, хотя многие опытные
программисты и считают его хорошей идеей. Причина этого...

http://anton-nazarov.livejournal.com/60347.html



https://sites.google.com/site/cinterfacesimplementations/

ака C Interfaces and Implementations: Techniques for Creating Reusable Software

его же A Retargetable C Compiler: Design and Implementation в кооперации с https://en.wikipedia.org/wiki/Christopher_Fraser

большитеражного(и открытого) софта с буквальным программированием мало ибо в нонешней общемировой
«какая-есть» экономической метрике таковое программирование есть финансирование конкурентов.

т.е как ни странно буквальное программирование предполагает несколько иное использование в сравнении
с чистым копипастом и тюнингом для фита по месту.

т.е в отличии от опенсорс(всякого) буквальное программирование угаширвает рынок поддержи ибо хорошо
отбуквенный код доступен для поддержки первому встречному рэндому.
