#+STARTUP: showall indent hidestars

* Зачем нужно знать всякие низкоуровневые вещи
http://eax.me/low-level/

Базовая мотивационная статья с примерами

* Написание и отладка кода на ассемблере x86/x64 в Linux
http://eax.me/linux-assembler/

- Введение
  Рассказывается о разных синтаксисах
- «Hello, world» на int 0x80
- Выполнение системного вызова через sysenter
- Выполнение системного вызова через syscall
- Отладка ассемблерного кода в GDB
- Заключение

* Ассемблеры для Linux: Сравнение GAS и NASM
https://www.ibm.com/developerworks/ru/library/l-gas-nasm/index.html

- Введение
- Базовая структура
  Подробно описываются различия в синтаксисе GAS и NASM
- Переменные и доступ к памяти
- Использование макросов
- Функции, внешние подпрограммы и стек
- Прочее

* От C к Ассемблеру
http://www.linuxcenter.ru/lib/articles/programming/gas.phtml

Статья знакомит с азами создания программ с использованием синтаксиса
GNU Assembler Syntax (GAS), как совместно с программами на языке C,
так и без них. Рассматриваются принципы создания подпрограмм на
ассемблере с учётом соглашений, принятых в языке C и многое
другое. Рекомендуется тем, кто не избавился от детской привычки все
разбирать, чтобы понять ответы на такие важные вопросы как "почему
самолёты тяжелее воздуха и не падают".

- Краткий обзор
- Начало
- Арифметические операции, операции сравнения и циклы
- Подпрограммы
- Работа со стеком
- Выделение места на стеке под локальные переменные
- Входные аргументы и возвращаемые значения
- Комбинирование программ на языке C и ассемблере
- Ассемблерный код, генерируемый компилятором GNU C
- Глобальные переменные
- Системные вызовы
- Программирование на встроенном ассемблере
- Упражнения

* Ассемблер в Unix
http://www.linuxcenter.ru/lib/articles/programming/asm_linux.phtml

HelloWorld и порядок передачи параметров в Linux
* Ассемблер в Linux для программистов C
https://ru.wikibooks.org/wiki/%D0%90%D1%81%D1%81%D0%B5%D0%BC%D0%B1%D0%BB%D0%B5%D1%80_%D0%B2_Linux_%D0%B4%D0%BB%D1%8F_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%81%D1%82%D0%BE%D0%B2_C

Викиучебник

* О GCC компиляции и библиотеках
http://pyviy.blogspot.ru/2010/12/gcc.html

- Основы
- Раздельная компиляция
- Библиотеки (статические и динамические)
* Настройка рабочего окружения в Linux для программирования микроконтроллеров AVR
http://avr.ru/tools/linux/dev

- Без чего не обойтись
- Интегрированная среда разработки
- Подключаем программатор
- Настройка Eclipse и первый проект

* ARM аccемблер
https://habrahabr.ru/post/133808/

- Введение
- Конвейерное исполнение (Pipeline execution)
- Условное выполнение
- Основы синтаксиса ARM ассемблера
- Имена регистров
- Переменные и костанты
- Примеры инструкций ARM ассемблера
- Несколько простых примеров

* Intel x86 Assembly Language in Minix
http://www.cburch.com/csbsju/cs/350/handouts/x86.html

* Linux - syscalls. Системные вызовы в Linux.
- Вместо введения.
- Теория. Что такое системные вызовы?
- Классический механизм обслуживания системных вызовов в Linux.
- Прерывания в архитектуре х86.
- Системные вызовы и int 0x80.
- system_call().
- Новый механизм обработки системных вызовов в
  Linux. sysenter/sysexit.
- Итоги.
* Arduino. Ассемблер AVR8
https://sites.google.com/site/vanyambauseslinux/arduino/arduino-assembler-avr8

- Регистры
- Переменные C и вызов функций ассемблера и C
- Регистры ввода-вывода (GPIO)
- Регистр состояния (SREG)
- Как посмотреть листинг скомпилированного кода
- Пример использования AVRASM.H

* Программирование AVR под Linux
http://radiokot.ru/articles/52/
