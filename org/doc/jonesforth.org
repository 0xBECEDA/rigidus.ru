#+STARTUP: showall indent hidestars

#+TITLE: Минимальный Forth

* Интро

Forth - один из тех alien-языков, который большинство программистов относят к категрии
странных, вроде Haskell, Lisp и.т.д. Настолько странных, что они предпочли бы не думать
об этом и продолжать писать код, за который им платят. Но это неправильно, и если вы
настоящий программист, вы должны хотя бы понимать этот язык, даже если вы никогда не
будете его использовать.

Лисп является вершиной языков высокого уровня, и возможности из лиспа десятки лет
добавляются в более распространенные языки. Но Forth в этом смысле является вершиной
низкоуровневых языков. Из коробки у него нет возможностей вроде динамического
управления памятью и даже строк. Фактически, на его примитивном уровне отсутствуют даже
такие базовые концепции как IF-выражения и циклы.

Почему же тогда вы могли бы хотеть узнать Forth? На это есть несколько очень веских
причин:

Прежде всего, Forth минимален. Вы действительно можете написать Forth целиком в,
скажем, 2000 строк кода. Я имею в виду не только программу Forth, я имею в виду полную
операционную систему Forth, среду и язык. Вы можете загружать такой Forth на голом ПК,
и он выдает подсказку, где вы можете начать делать какую-то полезную работу. Forth,
который у вас здесь, не минимален и использует Linux-процесс как его "базовый ПК"
(исключительно для обучающих целей). Это позволяет полностью понять систему. Кто может
сказать, что он полностью понимает, как работает Linux, или gcc?

Во-вторых, у Forth есть своеобразное свойство начальной загрузки. Под этим я
подразумеваю, что после написания небольшого ассемблерного кода, для общения с
оборудованием и реализации нескольких примитивов, весь остальной язык и компилятор
написан в самом Forth. Помните, я уже говорил, что Forth не хватает IF-выражений и
циклов? Конечно, на самом деле это не так, потому что такой lanuage был бы бесполезен,
но я имел в виду, что IF-утверждения и циклы написаны в самом Forth.

Теперь, конечно, это распространено и на других языках, и на этих языках мы называем это
"библиотеками". Например, в C ~printf~ представляет собой библиотечную функцию,
написанную на C. Но в FORTH это выходит за рамки просто библиотек. Можете ли вы
представить, как написать на C ~if~?

И это подводит нас к третьей причине: если вы можете написать ~if~ в Forth, то зачем
ограничивать себя обычными конструкциями ~if~ / ~while~ / ~for~ / ~switch~? Вам нужен
итератор по списку чисел? Вы можете добавить её в язык. Как насчет оператора, который
извлекает переменные непосредственно из файла конфигурации и делает их доступными как
переменные Forth? Или как насчет добавления языка зависимостей вроде ~Makefile~ к
языку? В Forth в этом нет проблем. Как насчет модификации компилятора Forth, чтобы
позволить сложные стратегии инлайнинга? - да легко! Эта концепция не распространена в
языках программирования, но имеет имя (на самом деле два имени): ~макросы~ (под
которыми я имею в виду макросы в стиле ~Lisp~, а не хромой препроцессор C) и ~языки
предметной области~ (DSL).

Эта статья не посвящена изучению Forth как языка, здесь только рассказывается о том,
как писать Forth. Фактически, пока вы не поймете, как написан Forth, у вас будет только
очень поверхностное понимание того, как его использовать.

* Сборка

Если вы хотите запустить этот Forth, а не просто прочитать его, вам понадобится Linux
на процессоре не ниже i386. Linux, потому что вместо того, чтобы напрямую
программировать на на голом ПК, что вполне возможно, я использую более простое, для
учебных целей, предположение, о том, что "оборудование" - это процесс Linux с
несколькими базовыми системными вызовами (чтение, запись и выход, вот это все). i386
необходим, потому что мне пришлось написать немного кода на ассемблере, а i386 на
сегодняшний день является наиболее распространенным. (Конечно, когда я говорю «i386»,
любой 32-разрядный или 64-разрядный процессор x86 подойдет. Я компилирую все это на
64-битном процессоре).

Опять же, чтобы собрать все это, вам понадобится gcc и GAS (GNU-ассемблер). Команды для
сборки и запуска кода (сохраните файл как 'jonesforth.S') такие:

#+BEGIN_SRC sh
  gcc -m32 -nostdlib -static -Wl,-Ttext,0 -Wl,--build-id=none -o jonesforth jonesforth.S
  cat jonesforth.f - | ./jonesforth
#+END_SRC

Если вы хотите запустить свои собственные программы FORTH, вы можете:

#+BEGIN_SRC sh
  cat jonesforth.f myprog.f | ./jonesforth
#+END_SRC

Если вы хотите загрузить свой собственный код FORTH, а затем продолжить чтение
пользовательских команд, вы можете сделать следующее:

#+BEGIN_SRC sh
  cat jonesforth.f myfunctions.f - | ./jonesforth
#+END_SRC

* Словарь

В FORTH, как вы узнаете, функции называются «словами», и так же, как и на других
языках, у них есть имя и определение. Вот два слова FORTH:

#+BEGIN_SRC forth
  : DOUBLE DUP + ;              \ имя "DOUBLE",  определение "DUP +"
  : QUADRUPLE DOUBLE DOUBLE ;   \ имя "QUADRUPLE", определение "DOUBLE DOUBLE"
#+END_SRC
