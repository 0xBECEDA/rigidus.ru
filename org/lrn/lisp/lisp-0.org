#+STARTUP: showall indent hidestars

* План работ

Начнем с реализации системы, которая позволит вычислять списковые формы.

Важнейшая часть интерпретатора Лисп - функция, называемая ~eval~, принимает на вход
список, представляющий собой программу, а на выходе возвращает результат её исполнения.

Так как мы пишем интерпретатор Lisp на лиспе, то наша функция будет называться
~myeval~.

Для того, чтобы писать минимально осмысленные, программмы мы должны реализовать базовый
набор примитивов (pure lisp):
- cons
- car
- cdr
- null
- consp
- define
- lambda
- functionp
- numberp
- eq
- сравнение чисел (=)
- if (или cond)

Имея функцию сравнения на равенстрво чисел и функции ~car~ и ~cdr~ можно определить
функцию, которая сравнивает списки, состоящие из чисел.  Поэтому база сранений - ~eq~
(сравнение символов) и ~=~.

В целях тренировки (на первом этапе) мы реализуем несколько отличающийся набор:
- вычисление самовычисляемых форм, таких как числа (и nil)
- арифметические вычисления: + (add) и * (mul)
- quote
- car
- cdr
- cons
- null
- if
- cond
- progn
- print
- list
- and
- or

Можно построить ~myeval~ с помощью ~cond~, тогда его структура будет такой:

#+BEGIN_SRC lisp
  (defun myeval (lst)
    (cond
      ;; Какие-то действия в зависимости от того какая форма
      ;; ...
      (t (error 'unknown-form))))
#+END_SRC

* Самовычисляемые формы

Первые случаи, которые мы можем реализовать - это самовычисляемые формы, такие,
например, как NIL, T и числа, которые вычисляются сами в себя:

#+NAME: number_0
#+BEGIN_SRC lisp
  ((null lst)                  nil)
  ((equal t lst)               t)
  ((numberp lst)               lst)
#+END_SRC

Протестируем

#+NAME: number_0_test
#+BEGIN_SRC lisp
  ;; Тесты для самовычисляемых форм
  (assert (equal T (myeval 'T)))
  (assert (equal NIL (myeval 'NIL)))
  (assert (equal 999 (myeval 999)))
#+END_SRC

* Цитирование

Следующая важная вещь - специальная форма QUOTE. Она возвращает свое содержимое без
вычисления:

#+NAME: quote_0
#+BEGIN_SRC lisp
  ((equal (car lst) 'quote)    (cadr lst))
#+END_SRC

Протестируем её:

#+NAME: quote_0_test
#+BEGIN_SRC lisp
  ;; Тесты для QUOTE
  (assert (equal '(+ 1 2) (myeval '(quote (+ 1 2)))))
#+END_SRC

* Работа с CONS-ячейками

Теперь определим CAR и CDR:

#+NAME: car_cdr_0
#+BEGIN_SRC lisp
  ((equal (car lst) 'car)      (car (myeval (cadr lst))))
  ((equal (car lst) 'cdr)      (cdr (myeval (cadr lst))))
#+END_SRC

Мы пока не можем протестировать их работу, потому что у нас нет CONS. Исправим это:

#+NAME: cons_0
#+BEGIN_SRC lisp
  ((equal (car lst) 'cons)     (cons (myeval (cadr lst))
                                     (myeval (caddr lst))))
#+END_SRC

Теперь можно протестировать создание cons-ячеек и получение правой и левой части ячейки

#+NAME: car_cdr_cons_0_test
#+BEGIN_SRC lisp
  ;; Тесты для cons-ячеек
  (assert (equal '(1 . 2) (myeval '(cons 1 2))))
  (assert (equal '((1 . 2) 3 . 4) (myeval '(cons (cons 1 2) (cons 3 4)))))
  (assert (equal 2 (myeval '(car (cons 2 3)))))
  (assert (equal 3 (myeval '(cdr (cons 2 3)))))
  (assert (equal '(1 . 2) (myeval '(car (cons (cons 1 2) (cons 3 4))))))
  (assert (equal '(3 . 4) (myeval '(cdr (cons (cons 1 2) (cons 3 4))))))
#+END_SRC

* NULL-предикат

Следующий этап - функция проверки на пустой список:

#+NAME: null_0
#+BEGIN_SRC lisp
  ((equal (car lst) 'null)     (null (myeval (cadr lst))))
#+END_SRC

Тест

#+NAME: null_0_test
#+BEGIN_SRC lisp
  ;; Тесты для NULL
  (assert (equal T (myeval '(null ()))))
#+END_SRC

* Условное выполнение (IF)

Теперь мы можем создать IF. Он принимает три аргумента и в зависимости от результата
вычисления первого аргумента вычисляет второй или третий аргумент:

#+NAME: if_0
#+BEGIN_SRC lisp
  ((equal (car lst) 'if)       (if (myeval (cadr lst))
                                   (myeval (caddr lst))
                                   (myeval (cadddr lst))))
#+END_SRC

Проверим, правильно ли вычисляется IF:

#+NAME: if_0_test
#+BEGIN_SRC lisp
  ;; Тесты для IF
  (assert (equal 2 (myeval '(if () 1 2))))
  (assert (equal 1 (myeval '(if (null ()) 1 2))))
#+END_SRC

* COND

Определив IF, мы можем заняться и более сложной управляющей формой - COND. Для ее
реализации потребуется вспомогательная функция, которая будет рекурсивно исполнять
аргументы COND. Назовем ее EVCOND:

#+NAME: evcond_0
#+BEGIN_SRC lisp
  (defun evcond (lst)
    (cond ((null lst)               nil)
          ((myeval (caar lst))      (myeval (cadar lst)))
          (t                        (evcond (cdr lst)))))
#+END_SRC

Она вычисляет левую часть первого из переданных clauses и если оценка вернула T - то
выполняет соответствующую правую часть и возвращается. В противном случае она
рекурсивно вызывает себя, передавая остаток списка clauses

Протестируем EVCOND:

#+NAME: evcond_0_test
#+BEGIN_SRC lisp
  ;; Тесты для ENVCOND
  (assert (equal 2   (evcond '((t 2)   (t 1)))))
  (assert (equal 1   (evcond '((nil 2) (t 1)))))
  (assert (equal nil (evcond '((nil 2) (nil 1)))))
#+END_SRC

С использованием EVCOND определить COND довольно просто:

#+NAME: cond_0
#+BEGIN_SRC lisp
  ((equal (car lst) 'cond)     (evcond (cdr lst)))
#+END_SRC

Протестируем правильность работы COND:

#+NAME: cond_0_test
#+BEGIN_SRC lisp
  ;; Тесты для COND
  (assert (equal 2 (myeval '(cond
                             (() 1)
                             (1 2)))))
#+END_SRC

* PROGN

Далее нам понадобится ~progn~. Снова будем использовать вспомогательную функцию ~evprogn~:

#+NAME: evprogn_0
#+BEGIN_SRC lisp
  (defun evprogn (lst)
    (cond ((null lst)        nil)
          ((null (cdr lst))  (myeval (car lst)))
          (t                 (myeval (car lst))
                             (evprogn (cdr lst)))))
#+END_SRC

Эта функция завершается с возвращением результата выполнения первого элемента
переданного списка, когда ей передан список из одного элемента. Иначе она вычисляет
первый элемент и рекурсивно вызывает себя от остатка списка.

Тест для ~evprogn~:

#+NAME: evprogn_0_test
#+BEGIN_SRC lisp
  ;; Тест для EVPROGN
  (assert (equal 2 (evprogn '(1 2))))
#+END_SRC

с ее помощью определим PROGN:

#+NAME: progn_0
#+BEGIN_SRC lisp
  ((equal (car lst) 'progn)    (evprogn (cdr lst)))
#+END_SRC

И проверим:

#+NAME: progn_0_test
#+BEGIN_SRC lisp
  ;; Тесты для PROGN
  (assert (equal 3 (myeval '(progn 1 2 3))))
#+END_SRC

* PRINT

Для того, чтобы иметь возможность отладочной печати, определим PRINT:

#+NAME: print_0
#+BEGIN_SRC lisp
  ((equal (car lst) 'print)    (print (myeval (cadr lst))))
#+END_SRC

Чтобы протестировать ~print~ воспользуемся перехватом ~standatd-output~

#+NAME: print_0_test
#+BEGIN_SRC lisp
  ;; Тесты для PRINT
  (assert (equal (with-output-to-string (*standard-output*)
                   (print 12))
                 (with-output-to-string (*standard-output*)
                   (myeval '(print 12)))))
  (assert (equal (print 12)
                 (myeval '(print 12))))
#+END_SRC

* LIST

List - это функция, которая вычисляет свои аргументы и формирует из результатов
вычисления список. Для ее определения нам понадобится вспомогательная функция
~evlis~. Она рекурсивно исполняет список, полученный в первом аргументе, применяя к
результатам исполнения CONS, чтобы получить список результатов:

#+NAME: evlis_0
#+BEGIN_SRC lisp
  (defun evlis (lst)
    (cond ((null lst)  nil)
          (t           (cons (myeval (car lst))
                             (evlis (cdr lst))))))
#+END_SRC

Протестируем ~evlis~:

#+NAME: evlis_0_test
#+BEGIN_SRC lisp
  ;; Тесты для EVLIS
  (assert (equal '(3 6 42)
                 (evlis '((+ 1 2) (* 2 3) 42))))
#+END_SRC

Теперь мы можем определить ~list~:

#+NAME: list_0
#+BEGIN_SRC lisp
  ((equal (car lst) 'list)     (evlis (cdr lst)))
#+END_SRC

Протестируем ~list~

#+NAME: list_0_test
#+BEGIN_SRC lisp
  ;; Тесты для LIST
  (assert (equal '(3 6 42)
                 (myeval '(list (+ 1 2) (* 2 3) 42))))
#+END_SRC

* AND

Подобно ~evlis~, ~myand~ рекурсивно вычисляет список, применяя к результатам
~and~. Подобно ~evprogn~, в случае передачи списка из одного аргумента ~myand~
завершается с возвращением результата вычисления ~and~ от одного элемента.

#+NAME: evand_0
#+BEGIN_SRC lisp
  (defun evand (lst)
    (cond ((null lst)        (and))
          ((null (cdr lst))  (and (myeval (car lst))))
          (t                 (and (myeval (car lst))
                                  (evand (cdr lst))))))
#+END_SRC

Протестируем ~evand~:

#+NAME: evand_0_test
#+BEGIN_SRC lisp
  ;; Тесты для EVAND
  (assert (equal (and)           (evand '())))
  (assert (equal (and 1)         (evand '(1))))
  (assert (equal (and nil)       (evand '(nil))))
  (assert (equal (and 1 nil)     (evand '(1 nil ))))
  (assert (equal (and 1 2 nil)   (evand '(1 2 nil))))
  (assert (equal (and 1 2 3)     (evand '(1 2 3))))
#+END_SRC

Теперь мы можем определить ~and~:

#+NAME: and_0
#+BEGIN_SRC lisp
  ((equal (car lst) 'and)      (evand (cdr lst)))
#+END_SRC

Протестируем ~and~:

#+NAME: and_0_test
#+BEGIN_SRC lisp
  ;; Тесты для AND
  (assert (equal (and)                (myeval '(and))))
  (assert (equal (and 1)              (myeval '(and 1))))
  (assert (equal (and nil)            (myeval '(and nil))))
  (assert (equal (and 1 nil)          (myeval '(and 1 nil))))
  (assert (equal (and 1 2 nil)        (myeval '(and 1 2 nil))))
  (assert (equal (and 1 2 3)          (myeval '(and 1 2 3))))
  (assert (equal (and 1 (and 1 2) 3)  (myeval '(and 1 (and 1 2) 3))))
#+END_SRC

* OR

Определение ~or~ полностью аналогочно определению ~and~:

#+NAME: evor_0
#+BEGIN_SRC lisp
  (defun evor (lst)
    (cond ((null lst)        (or))
          ((null (cdr lst))  (or (myeval (car lst))))
          (t                 (or (myeval (car lst))
                                 (evor (cdr lst))))))
#+END_SRC

Тесты

#+NAME: evor_0_test
#+BEGIN_SRC lisp
  ;; Тесты для EVOR
  (assert (equal (or)           (evor '())))
  (assert (equal (or nil 1)     (evor '(nil 1))))
  (assert (equal (or nil nil 1) (evor '(nil nil 1))))
  (assert (equal (or nil 1 2)   (evor '(nil 1 2))))
  (assert (equal (or 1 2 3)     (evor '(1 2 3))))
#+END_SRC

Теперь мы можем определить ~or~:

#+NAME: or_0
#+BEGIN_SRC lisp
  ((equal (car lst) 'or)       (evor  (cdr lst)))
#+END_SRC

Протестируем ~or~:

#+NAME: or_0_test
#+BEGIN_SRC lisp
  ;; Тесты для OR
  (assert (equal (or)                  (myeval '(or))))
  (assert (equal (or nil 1)            (myeval '(or nil 1))))
  (assert (equal (or nil nil 1)        (myeval '(or nil nil 1))))
  (assert (equal (or nil 1 2)          (myeval '(or nil 1 2))))
  (assert (equal (or nil (or 3 2) 2)   (myeval '(or nil (or 3 2) 2))))
#+END_SRC

* Встроенные функции арифметики

Теперь мы можем сделать функции сложения и умножения. Для того, чтобы они могли
принимать любое количество аргументов, необходимо сделать их рекурсивными.

Они будут получать список, брать из него первый элемент и оценивать его, а потом
рекурсивно вызывать себя от остатка списка.

#+NAME: evaddmul_0
#+BEGIN_SRC lisp
  (defun evadd (lst)
    (cond ((null lst)        0)
          ((null (cdr lst))  (+ (myeval (car lst))))
          (t                 (+ (myeval (car lst))
                                (evadd (cdr lst))))))
  (defun evmul (lst)
    (cond ((null lst)        1)
          ((null (cdr lst))  (* (myeval (car lst))))
          (t                 (* (myeval (car lst))
                                (evmul (cdr lst))))))
#+END_SRC

Протестируем ~evadd~ и ~evmul~:

#+NAME: evaddmul_0_test
#+BEGIN_SRC lisp
  ;; Тесты для EVADD
  (assert (equal 0                (evadd '())))
  (assert (equal 2                (evadd '(2))))
  (assert (equal 5                (evadd '(2 3))))
  (assert (equal (+ 2 3 4)        (evadd '(2 3 4))))
  (assert (equal (+ 2 (+ 3 4))    (evadd '(2 (+ 3 4)))))
  (assert (equal (+ 2 (+ 3 4) 5)  (evadd '(2 (+ 3 4) 5))))
  ;; Тесты для EVMUL
  (assert (equal 1                (evmul '())))
  (assert (equal 2                (evmul '(2))))
  (assert (equal 6                (evmul '(2 3))))
  (assert (equal (* 2 3 4)        (evmul '(2 3 4))))
  (assert (equal (* 2 (* 3 4))    (evmul '(2 (* 3 4)))))
  (assert (equal (* 2 (* 3 4) 5)  (evmul '(2 (* 3 4) 5))))
#+END_SRC

Теперь мы можем определить сложение и умножение внутри ~myeval~

#+NAME: ariph_0
#+BEGIN_SRC lisp
  ((equal (car lst) '+)        (evadd (cdr lst)))
  ((equal (car lst) '*)        (evmul (cdr lst)))
#+END_SRC

Теперь мы можем протестировать то, что у нас получилось:

#+NAME: ariph_0_test
#+BEGIN_SRC lisp
  ;; Тесты для арифметических функций
  (assert (equal 7 (myeval 7)))
  (assert (equal 3 (myeval '(+ 1 2))))
  (assert (equal 33 (myeval '(* (+ 1 2) (+ 3 4 4)))))
#+END_SRC

* Итоги

Соберем простой интерпретатор из ~myeval~ и вспомогательных функций и запишем его файл:

#+BEGIN_SRC lisp :tangle lisp-0.lisp :noweb tangle :exports code :padline no :comments none
  <<evcond_0>>
  <<evprogn_0>>
  <<evlis_0>>
  <<evand_0>>
  <<evor_0>>
  <<evaddmul_0>>
  (defun myeval (lst)
    (cond
      <<number_0>>
      <<quote_0>>
      <<car_cdr_0>>
      <<cons_0>>
      <<null_0>>
      <<if_0>>
      <<cond_0>>
      <<progn_0>>
      <<print_0>>
      <<list_0>>
      <<and_0>>
      <<or_0>>
      <<ariph_0>>
      (t (error 'unknown-form))))

  <<number_0_test>>
  <<quote_0_test>>
  <<car_cdr_cons_0_test>>
  <<null_0_test>>
  <<if_0_test>>
  <<evcond_0_test>>
  <<cond_0_test>>
  <<evprogn_0_test>>
  <<progn_0_test>>
  <<print_0_test>>
  <<evlis_0_test>>
  <<list_0_test>>
  <<and_0_test>>
  <<or_0_test>>
  <<evaddmul_0_test>>
  <<ariph_0_test>>
#+END_SRC

Мы должны получить следующий результат:

#+BEGIN_SRC lisp
  (defun evcond (lst)
    (cond ((null lst)               nil)
          ((myeval (caar lst))      (myeval (cadar lst)))
          (t                        (evcond (cdr lst)))))
  (defun evprogn (lst)
    (cond ((null lst)        nil)
          ((null (cdr lst))  (myeval (car lst)))
          (t                 (myeval (car lst))
                             (evprogn (cdr lst)))))
  (defun evlis (lst)
    (cond ((null lst)  nil)
          (t           (cons (myeval (car lst))
                             (evlis (cdr lst))))))
  (defun evand (lst)
    (cond ((null lst)        (and))
          ((null (cdr lst))  (and (myeval (car lst))))
          (t                 (and (myeval (car lst))
                                  (evand (cdr lst))))))
  (defun evor (lst)
    (cond ((null lst)        (or))
          ((null (cdr lst))  (or (myeval (car lst))))
          (t                 (or (myeval (car lst))
                                 (evor (cdr lst))))))
  (defun evadd (lst)
    (cond ((null lst)        0)
          ((null (cdr lst))  (+ (myeval (car lst))))
          (t                 (+ (myeval (car lst))
                                (evadd (cdr lst))))))
  (defun evmul (lst)
    (cond ((null lst)        1)
          ((null (cdr lst))  (* (myeval (car lst))))
          (t                 (* (myeval (car lst))
                                (evmul (cdr lst))))))
  (defun myeval (lst)
    (cond
      ((null lst)                  nil)
      ((equal t lst)               t)
      ((numberp lst)               lst)
      ((equal (car lst) 'quote)    (cadr lst))
      ((equal (car lst) 'car)      (car (myeval (cadr lst))))
      ((equal (car lst) 'cdr)      (cdr (myeval (cadr lst))))
      ((equal (car lst) 'cons)     (cons (myeval (cadr lst))
                                         (myeval (caddr lst))))
      ((equal (car lst) 'null)     (null (myeval (cadr lst))))
      ((equal (car lst) 'if)       (if (myeval (cadr lst))
                                       (myeval (caddr lst))
                                       (myeval (cadddr lst))))
      ((equal (car lst) 'cond)     (evcond (cdr lst)))
      ((equal (car lst) 'progn)    (evprogn (cdr lst)))
      ((equal (car lst) 'print)    (print (myeval (cadr lst))))
      ((equal (car lst) 'list)     (evlis (cdr lst)))
      ((equal (car lst) 'and)      (evand (cdr lst)))
      ((equal (car lst) 'or)       (evor  (cdr lst)))
      ((equal (car lst) '+)        (evadd (cdr lst)))
      ((equal (car lst) '*)        (evmul (cdr lst)))
      (t (error 'unknown-form))))

  ;; Тесты для самовычисляемых форм
  (assert (equal T (myeval 'T)))
  (assert (equal NIL (myeval 'NIL)))
  (assert (equal 999 (myeval 999)))
  ;; Тесты для QUOTE
  (assert (equal '(+ 1 2) (myeval '(quote (+ 1 2)))))
  ;; Тесты для cons-ячеек
  (assert (equal '(1 . 2) (myeval '(cons 1 2))))
  (assert (equal '((1 . 2) 3 . 4) (myeval '(cons (cons 1 2) (cons 3 4)))))
  (assert (equal 2 (myeval '(car (cons 2 3)))))
  (assert (equal 3 (myeval '(cdr (cons 2 3)))))
  (assert (equal '(1 . 2) (myeval '(car (cons (cons 1 2) (cons 3 4))))))
  (assert (equal '(3 . 4) (myeval '(cdr (cons (cons 1 2) (cons 3 4))))))
  ;; Тесты для NULL
  (assert (equal T (myeval '(null ()))))
  ;; Тесты для IF
  (assert (equal 2 (myeval '(if () 1 2))))
  (assert (equal 1 (myeval '(if (null ()) 1 2))))
  ;; Тесты для ENVCOND
  (assert (equal 2   (evcond '((t 2)   (t 1)))))
  (assert (equal 1   (evcond '((nil 2) (t 1)))))
  (assert (equal nil (evcond '((nil 2) (nil 1)))))
  ;; Тесты для COND
  (assert (equal 2 (myeval '(cond
                             (() 1)
                             (1 2)))))
  ;; Тест для EVPROGN
  (assert (equal 2 (evprogn '(1 2))))
  ;; Тесты для PROGN
  (assert (equal 3 (myeval '(progn 1 2 3))))
  ;; Тесты для PRINT
  (assert (equal (with-output-to-string (*standard-output*)
                   (print 12))
                 (with-output-to-string (*standard-output*)
                   (myeval '(print 12)))))
  (assert (equal (print 12)
                 (myeval '(print 12))))
  ;; Тесты для EVLIS
  (assert (equal '(3 6 42)
                 (evlis '((+ 1 2) (* 2 3) 42))))
  ;; Тесты для LIST
  (assert (equal '(3 6 42)
                 (myeval '(list (+ 1 2) (* 2 3) 42))))
  ;; Тесты для AND
  (assert (equal (and)                (myeval '(and))))
  (assert (equal (and 1)              (myeval '(and 1))))
  (assert (equal (and nil)            (myeval '(and nil))))
  (assert (equal (and 1 nil)          (myeval '(and 1 nil))))
  (assert (equal (and 1 2 nil)        (myeval '(and 1 2 nil))))
  (assert (equal (and 1 2 3)          (myeval '(and 1 2 3))))
  (assert (equal (and 1 (and 1 2) 3)  (myeval '(and 1 (and 1 2) 3))))
  ;; Тесты для OR
  (assert (equal (or)                  (myeval '(or))))
  (assert (equal (or nil 1)            (myeval '(or nil 1))))
  (assert (equal (or nil nil 1)        (myeval '(or nil nil 1))))
  (assert (equal (or nil 1 2)          (myeval '(or nil 1 2))))
  (assert (equal (or nil (or 3 2) 2)   (myeval '(or nil (or 3 2) 2))))
  ;; Тесты для EVADD
  (assert (equal 0                (evadd '())))
  (assert (equal 2                (evadd '(2))))
  (assert (equal 5                (evadd '(2 3))))
  (assert (equal (+ 2 3 4)        (evadd '(2 3 4))))
  (assert (equal (+ 2 (+ 3 4))    (evadd '(2 (+ 3 4)))))
  (assert (equal (+ 2 (+ 3 4) 5)  (evadd '(2 (+ 3 4) 5))))

  ;; Тесты для EVMUL
  (assert (equal 1                (evmul '())))
  (assert (equal 2                (evmul '(2))))
  (assert (equal 6                (evmul '(2 3))))
  (assert (equal (* 2 3 4)        (evmul '(2 3 4))))
  (assert (equal (* 2 (* 3 4))    (evmul '(2 (* 3 4)))))
  (assert (equal (* 2 (* 3 4) 5)  (evmul '(2 (* 3 4) 5))))
  ;; Тесты для арифметических функций
  (assert (equal 7 (myeval 7)))
  (assert (equal 3 (myeval '(+ 1 2))))
  (assert (equal 33 (myeval '(* (+ 1 2) (+ 3 4 4)))))
#+END_SRC
