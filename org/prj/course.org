#+STARTUP: showall indent hidestars

#+TITLE: Изучи программирование за 21 год

* Интро

Этот курс задуман как несколько более фундаментальный, чем обычно предлагаемые курсы,
так что у него даже есть неофициальное название "Изучи программирование за 21 год".

Материалы и план курса сформированы но уточняются и дополняются. Ожидается, что курс
будет рассматривать все вопросы программирования от архитектуры низкоуровневых средств
до абстракций лямбда-исчисления.

* Прикосновение к магии
** Hello World
** Транслятор кода Морзе

Первая осмысленная программа в процедурном стиле.

#+BEGIN_SRC js
  var array =[
    ['a','._'],
    ['b','1'],
    ['c','2'],
    ['d','3'],
    ['e','4'],
    ['f','5'],
    ['g','6'],
    ['h','7'],
    ['i','8'],
    ['j','9'],
    ['k','a'],
    ['l','b'],
    ['m','__'],
    ['n','_.'],
    ['o','d'],
    ['p','e'],
    ['q','f'],
    ['r','g'],
    ['s','h'],
    ['t','_'],
    ['u','j'],
    ['v','k'],
    ['w','l'],
    ['x','m'],
    ['y','n'],
    ['z','o']
  ];



  function binary_search (data, target, start, end) {
    console.log("target="+target);
    console.log("start="+start);
    console.log("end="+end);

    if (end < data[0]) {
      console.log("return 1");
      return false;
    }

    // Находим среднее значение
    const middle = Math.floor(start + (end - start) / 2);
    console.log(middle);
    console.log(data[middle][0]);
    console.log(target);
    // Если содержимое элемента с индексом, равным среднему значению оказалось равно target

    if (target === data[middle][0]) {
      // возвращаем соответствие
      console.log("return found");
      return data[middle][1];
    }

    // Если осталось два элемента: на который указывает start и на который указывает end
    if (data[end] - 1 === data[start]) {
      if (target === data[end][0]) {
        // возвращаем соответствие
        console.log("return from found on end");
        return data[end][1];
      }
      if (target === data[start][0]) {
        // возвращаем соответствие
        console.log("return from found on start");
        return data[start][1];
      }
      console.log("return 2");
      return false;
    }

    if (target.charCodeAt() > data[middle][0].charCodeAt()) {
      console.log("we need to go deeper! >");
      var pre_result = binary_search(data, target, middle, end);
      console.log("return from found on >");
      return pre_result;
    }

    if (target.charCodeAt() < data[middle][0].charCodeAt()) {
      console.log("we need to go deeper! <");
      var pre_result = binary_search(data, target, start, middle);
      console.log("return from found on <");
      return pre_result;
    }
    console.log("return 3");
    return false;
  }

  function helper () {
    var getText = document.getElementById('translate');
    console.log("getText="+document.getElementById('translate'));
    var param = getText.value;
    console.log("param="+param);
    document.getElementById('Translate_ready').value = translate(param);

  }

  function translate (param) {
   return param.split('').map(function(symbol) {
      var result_value = binary_search(array, symbol, 0, array.length-1);
      if (false === result_value) {
        alert("something wrong");
      }
      return result_value;
    });
  }

  // var return_value = translate('abc');
  // console.log("translate result is " + return_value);
#+END_SRC


** HTML и CSS
Декларативные языки разметки
* Создание игры на Java

Этот интенсив рассчитан на 3-5 дней. За это время мы создаем простую игру [[https://ru.wikipedia.org/wiki/Breakout_(%D0%B8%D0%B3%D1%80%D0%B0)][Breakout]]
([[https://ru.wikipedia.org/wiki/Arkanoid][Arkanoid]]) с использованием ~JavaSE~ и графической библиотеки ~libGDX~.

Геймплей: Игрок контролирует небольшую платформу-ракетку, которую можно передвигать
горизонтально от одной стенки до другой, подставляя её под шарик, предотвращая его
падение вниз. Удар шарика по кирпичу приводит к разрушению кирпича.

- [[file:../lrn/java/setup.org][Установка всего необходимого]]
- [[file:../lrn/java/gameclass.org][Анализируем MyGdxGame]]
- [[file:../lrn/java/control.org][Управление и физика]]
- [[file:../lrn/java/bricks.org][Разбиваемые элементы]]
- [[file:../lrn/java/platform.org][Платформа]]
- [[file:../lrn/java/endgame.org][Завершение игры]]

* Низкоуровневое программирование
** Стек и вызов процедур
*** Пролог функции
** Указатели
*** Транслятор кода Морзе на Ассемблере
**** Табличный перекодировщик

Работа с массивом структур, содержащих указатели

#+BEGIN_SRC asm
  a:
      .ascii "_."
      .byte 0
  b:
      .ascii "_..."
  c:
      .ascii "_._."
      .ascii "AAAA"
  table:
  table_a:
      .ascii "a"
      .int a
  table_b:
      .ascii "b"
      .int b
  table_c:
      .ascii "c"
      .int c
#+END_SRC

**** Списковый перекодировщик

Работа со списком структур, содержащих указатели

#+BEGIN_SRC asm
  a:
      .int 0
      .ascii "a"
      .ascii "_."
      .byte 0
  b:
      .int a
      .ascii "b"
      .ascii "_..."
      .byte 0
  c:
      .int b
      .ascii "c"
      .ascii "_._."
      .byte 0
  last:
      int c
#+END_SRC

*** Эквивалентность программ

- Построение трасс
- Эквивалентность по трассам
- Обратная трассировка
- Построение остаточной программы из заданной точки графа управления

** Взамодействие с операционной системой
- [[file:../lrn/asm/cmd.org][Анализ ассемблирования и сборки Linux-программы]]
** Ввод-вывод
** Обработка прерываний
** Оверлеи
** Разделяемые библиотеки
** Компоновка
** Системы сборки
** Зависимости
* Обратная инженерия
- https://vk.com/wall-54530371_157122
- https://vk.com/wall-54530371_156890
** Дизассемблирование
- [[file:../lrn/asm/strip.org][Ищем main без отладочных символов]]
** Инструментирование кода
** Перехват вызовов
** Инструменты анализа систем

* Построение высокоуровнего языка

** Минимальный Forth

- [[file:../lrn/forth/jonesforth.org][Минимальный Forth с нуля]]

** Объектная система
** Сборка мусора
** Выращиваем Lisp
** Построение трассировщика
** Декомпиляция и автоматический анализ

- Построение остаточной программы из заданной точки

** Суперкомпиляция
* Типизация
** Сильная/слабая
** Строгая/нестрогая
** Вывод типов
* Императивные парадигмы
** Процедурная
** модульная
** объектно-ориентированная
* Механизмы абстракции
** Кольцевой буфер
** Потоки
** Очереди сообщений
** Машины состояний
** Модель взаимодействующих акторов
** Сигналы
* Функциональное программирование
** Код как данные
** Рекурсия
** Функции высшего порядка
** Чистота
** Ленивость.
** Реактивность
- https://habrahabr.ru/company/infopulse/blog/338910/
* Рантайм
** Менеджер памяти и умные указатели
** Сборка мусора
** Зеленые потоки
** Супервайзинг
* Логическое программирование
* Пролог
* Рефал
* Forth
* Визуальное программирование
** Дракон
* Написание языков и виртуальных машин
** Создание компилятора
** Написание среды времени выполнения
* Распределенные системы
** Топология сетей
- https://habrahabr.ru/post/340626/
* Самообучающиеся системы
** Линейная регрессия
** Кластеризация
** Деревья решений
** Нейронные сети и их обучение
- https://geektimes.ru/post/84015/
- https://habrahabr.ru/post/312450/
- https://proglib.io/p/neural-nets-guide/
- https://proglib.io/p/intro-to-deep-learning/
- https://habrahabr.ru/company/neurodatalab/blog/336218/
** Динамическое программирование
** Генетическое программирование
