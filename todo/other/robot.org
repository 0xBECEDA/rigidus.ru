* Условие задачи

  Существует плоскость, разделенная на клетки.

  Каждая клетка может быть:
  - пустой
  - заполненной грузом (одна или несколько единиц)
  - содержать робота

  Робот может ходить по всем клеткам, кроме тех, что содержат
  груз. Движение дискретно с шагом длины - 1 клетка.

  Робот может поднять одну единицу груза, если этот груз находится в
  соседней с ним клетке.

  Если робот имеет груз - он может опустить одну единицу груза в
  соседнюю с ним клетку

  Найти последовательность действий робота для перемещения всех грузов
  в заданную клетку

* Входные данные

  - Координаты грузов на матрице
  - Начальные координаты робота
  - Координаты целевой клетки

* Генерация тестового сценария

  Тестовый сценарий представляет собой прямоугольное поле со сторонами
  =width= и =height=, на котором:
  - пустые точки обозначены =0=
  - точки с грузом обозначены =1=
  - робот обозначен =2=
  - точка сброса груза обозначена =3=
  - робот с грузом обозначен =4=
  - посещенное состояние обозначим =5=

  #+NAME: gen_suite
  #+BEGIN_SRC lisp
    (defun gen-suite (height width count)
      (let ((field (loop :for y :from 0 :to (- height 1) :collect
                      (loop :for x :from 0 :to (- width 1) :collect
                         0))))
        (macrolet ((put-in-free-cell (val)
                     `(tagbody
                       repeat
                         (let ((y (random height))
                               (x (random width)))
                           (if (equal 0 (nth x (nth y field)))
                               (setf (nth x (nth y field)) ,val)
                               (go repeat))))))
          (loop :for c :from 0 :to (- count 1) :do
             (put-in-free-cell 1))
          (put-in-free-cell 2)
          (put-in-free-cell 3))
        field))

    ;; (gen-suite 5 5 3)
    ;; => ((0 0 0 0 3) (0 1 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (1 1 0 0 2))
  #+END_SRC

* Отладочный вывод

  #+NAME: dbg
  #+BEGIN_SRC lisp
    (defun dbg (suite)
      (format t "~{~A~}~%"
              (loop :for y :from 0 :to (length suite) :collect
                 (format nil "~{~A~^.~}~%" (nth y suite)))))

    ;; (dbg (gen-suite 5 5 3))
    ;; =>
    ;; 0.0.0.0.0
    ;; 0.0.0.1.0
    ;; 1.0.0.0.0
    ;; 0.0.2.0.0
    ;; 0.1.0.3.0
  #+END_SRC

* Решение задачи

  #+NAME: solver
  #+BEGIN_SRC lisp
    (defparameter *suite* (gen-suite 5 5 3))

    (defun all-outer-cells (y x)
      (list (cons (- y 1) (- x 1))
            (cons (- y 1) (- x 0))
            (cons (- y 1) (+ x 1))
            (cons (- y 0) (- x 1))
            (cons (- y 0) (+ x 1))
            (cons (+ y 1) (- x 1))
            (cons (+ y 1) (- x 0))
            (cons (+ y 1) (+ x 1))))

    (defmacro cell (y x suite)
      `(nth ,x (nth ,y ,suite)))

    (defun solver (suite)
      (dbg suite)
      ;; Определяем размер поля
      (let ((height (length suite))
            (width  (length (car suite))))
        (flet (;; Функция фильтрующая координаты за пределами доски
               (impossible (z)
                 (or (> 0 (car z))
                     (> 0 (cdr z))
                     (< (- height 1) (car z))
                     (< (- width 1) (cdr z)))))
          ;; Находим координаты робота в нем
          (let ((robot-y) (robot-x))
            (loop :for y :from 0 :to (- height 1) :collect
               (loop :for x :from 0 :to (- width 1) :collect
                  (when (equal 2 (nth x (nth y suite)))
                    (setf robot-y y)
                    (setf robot-x x))))
            (when (null robot-y) ;; defence
              (error 'no-robot-in-field))
            (let* ((nears (remove-if #'impossible (all-outer-cells robot-y robot-x)))
                   (near-cargo? (block near-cargo-block
                                  (mapcar #'(lambda (z)
                                              (when (equal 1 (cell (car z) (cdr z) suite))
                                                (return-from near-cargo-block z)))
                                          nears)
                                  nil)))
              (if near-cargo?
                  ;; then - pick up cargo and recurr
                  (values
                   (setf (cell (cdr near-cargo?) (car near-cargo?) suite) 0)
                   (setf (cell (cdr near-cargo?) (car near-cargo?) suite) 4)
                   ;; (solver suite)
                   )
                  ;; (values robot-y robot-x near-cargo?)
                  ;; else
                  (if (null nears)
                      (print 'fail)
                      (progn
                        (setf (cell robot-y robot-x suite) 5)
                        (loop :for z :in nears :do
                           (let ((tmp-suite (copy-tree suite)))
                             (setf (cell (car z) (cdr z) tmp-suite) 2)
                             (dbg tmp-suite)))))))))))

    (defparameter *suite* (gen-suite 5 5 3))
    (solver *suite*)

    (defmacro eval-always (&body body)
      `(eval-when (:compile-toplevel :load-toplevel :execute)
         ,@body))

    (eval-always
      (defmacro and-it (&rest args)
        "Like AND. IT is bound to the value of the previous AND form."
        (cond ((null args) t)
              ((null (cdr args)) (car args))
              (t `(when-it ,(car args) (and-it ,@(cdr args)))))))

    (defmacro maybecall (val &rest funs)
      `(and-it ,val
               ,@(mapcar (lambda (fun)
                           `(funcall ,fun it))
                         funs)))
  #+END_SRC
